<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Image to PDF Converter | BestPDF</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: #f8f9fa;
      color: #333;
      line-height: 1.6;
    }

    .container {
      max-width: 1000px;
      margin: 0 auto;
      padding: 20px;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
    }

    header {
      text-align: center;
      margin-bottom: 30px;
    }

    header h1 {
      font-size: 2.2em;
      color: #333;
    }

    header p {
      color: #666;
      margin-top: 8px;
    }

    /* Buttons */
    .btn-primary {
      background-color: #e60000;
      color: white;
      border: none;
      padding: 12px 24px;
      font-size: 1em;
      border-radius: 6px;
      cursor: pointer;
      transition: background 0.3s;
      font-weight: 600;
    }

    .btn-primary:hover {
      background-color: #cc0000;
    }

    .upload-section {
      margin-bottom: 30px;
    }

    .upload-box {
      border: 2px dashed #ccc;
      border-radius: 12px;
      padding: 40px 20px;
      text-align: center;
      background-color: white;
      transition: border 0.3s ease;
      cursor: pointer;
    }

    .upload-box:hover {
      border-color: #e60000;
    }

    .upload-box.drag-over {
      border-color: #e60000;
      background-color: #fef0f0;
    }

    .upload-icon {
      font-size: 50px;
      color: #e60000;
      margin-bottom: 10px;
    }

    .upload-text {
      margin-bottom: 15px;
      color: #555;
    }

    .cloud-options {
      margin-top: 20px;
      display: flex;
      justify-content: center;
      gap: 10px;
      flex-wrap: wrap;
    }

    .cloud-options button {
      background: white;
      border: 1px solid #ddd;
      padding: 8px 16px;
      border-radius: 6px;
      font-size: 0.9em;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 6px;
    }

    .cloud-options button:hover {
      background-color: #f0f0f0;
    }

    /* Settings Section */
    .settings-section {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
    }

    .preview-grid {
      flex: 1;
      min-width: 300px;
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
      gap: 12px;
    }

    .image-card {
      position: relative;
      border-radius: 8px;
      overflow: hidden;
      box-shadow: 0 2px 6px rgba(0,0,0,0.1);
      aspect-ratio: 1 / 1.4;
    }

    .image-card img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .delete-btn {
      position: absolute;
      top: 6px;
      right: 6px;
      background: rgba(255,0,0,0.8);
      color: white;
      border: none;
      width: 24px;
      height: 24px;
      border-radius: 50%;
      font-size: 12px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .settings-panel {
      flex: 1;
      min-width: 300px;
      background: white;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    }

    .setting-item {
      margin-bottom: 18px;
    }

    .setting-item label {
      display: block;
      margin-bottom: 6px;
      font-weight: 600;
      color: #333;
    }

    .setting-item select,
    .radio-group {
      width: 100%;
    }

    .radio-group {
      display: flex;
      gap: 15px;
    }

    .merge-option {
      margin-bottom: 20px;
      font-size: 0.95em;
    }

    .merge-option label {
      display: flex;
      align-items: center;
      gap: 6px;
      cursor: pointer;
    }

    /* Progress Section */
    .progress-section {
      text-align: center;
      padding: 40px 20px;
    }

    .spinner {
      width: 50px;
      height: 50px;
      margin: 0 auto;
      border: 5px solid #f3f3f3;
      border-top: 5px solid #e60000;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .progress-bar {
      width: 100%;
      height: 10px;
      background: #eee;
      border-radius: 5px;
      margin-top: 20px;
      overflow: hidden;
    }

    .progress-fill {
      height: 100%;
      width: 0%;
      background: #e60000;
      transition: width 0.3s ease;
    }

    /* Download Section */
    .download-section {
      text-align: center;
      padding: 40px 20px;
    }

    .result-card {
      background: white;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 4px 15px rgba(0,0,0,0.1);
      max-width: 500px;
      margin: 0 auto;
    }

    .result-icon {
      font-size: 60px;
      color: #e60000;
      margin-bottom: 15px;
    }

    .extra-options {
      margin-top: 20px;
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      justify-content: center;
    }

    .extra-options button {
      background: white;
      border: 1px solid #ddd;
      padding: 8px 14px;
      border-radius: 6px;
      font-size: 0.9em;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 6px;
    }

    .extra-options button:hover {
      background-color: #f0f0f0;
    }

    /* Footer */
    footer {
      text-align: center;
      margin-top: 50px;
      color: #aaa;
      font-size: 0.9em;
    }

    /* Responsive */
    @media (max-width: 768px) {
      .container {
        padding: 15px;
      }

      header h1 {
        font-size: 1.8em;
      }

      .settings-section {
        flex-direction: column;
      }

      .upload-box {
        padding: 30px 15px;
      }

      .cloud-options, .extra-options {
        flex-direction: column;
        align-items: center;
      }

      .cloud-options button, .extra-options button {
        width: 100%;
        max-width: 250px;
      }
    }

    .hidden {
      display: none !important;
    }
  </style>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body>
  <div class="container">
    <!-- Header -->
    <header>
      <h1>Image to PDF Converter</h1>
      <p>Convert JPG, PNG, WebP, GIF and other images to PDF in seconds.</p>
    </header>

    <!-- Upload Section -->
    <section class="upload-section">
      <div class="upload-box" id="dropZone">
        <i class="fas fa-cloud-upload-alt upload-icon"></i>
        <p class="upload-text">Select images or drag & drop them here</p>
        <button id="uploadBtn" class="btn-primary">Select Images</button>

        <div class="cloud-options">
          <span>or import from:</span>
          <button id="googleDriveBtn"><i class="fab fa-google"></i> Google Drive</button>
          <button id="dropboxBtn"><i class="fab fa-dropbox"></i> Dropbox</button>
        </div>

        <input type="file" id="fileInput" accept="image/*" multiple style="display: none;" />
      </div>
    </section>

    <!-- Preview & Settings -->
    <section id="settingsSection" class="settings-section hidden">
      <div class="preview-grid" id="previewGrid"></div>

      <div class="settings-panel">
        <h3>PDF Settings</h3>
        <div class="setting-item">
          <label>Page Size:</label>
          <select id="pageSize">
            <option value="a4">A4 (210 x 297 mm)</option>
            <option value="letter">Letter (8.5 x 11 in)</option>
            <option value="a3">A3</option>
          </select>
        </div>

        <div class="setting-item">
          <label>Orientation:</label>
          <div class="radio-group">
            <label><input type="radio" name="orientation" value="portrait" checked> Portrait</label>
            <label><input type="radio" name="orientation" value="landscape"> Landscape</label>
          </div>
        </div>

        <div class="setting-item">
          <label>Margins:</label>
          <select id="margins">
            <option value="none">No Margin</option>
            <option value="small">Small</option>
            <option value="big">Big</option>
          </select>
        </div>

        <div class="merge-option">
          <label>
            <input type="checkbox" id="mergeAll" checked>
            Merge all images into one PDF file
          </label>
        </div>

        <button id="convertBtn" class="btn-primary">Convert to PDF</button>
      </div>
    </section>

    <!-- Conversion Progress -->
    <section id="progressSection" class="progress-section hidden">
      <div class="progress-container">
        <div class="spinner"></div>
        <p>Converting your images to PDF...</p>
        <div class="progress-bar">
          <div class="progress-fill" id="progressFill"></div>
        </div>
      </div>
    </section>

    <!-- Download Section -->
    <section id="downloadSection" class="download-section hidden">
      <div class="result-card">
        <i class="fas fa-file-pdf result-icon"></i>
        <h3>Your PDF is ready!</h3>
        <button id="downloadPdf" class="btn-primary">Download PDF</button>

        <div class="extra-options">
          <button><i class="fab fa-google"></i> Save to Google Drive</button>
          <button><i class="fab fa-dropbox"></i> Save to Dropbox</button>
          <button><i class="fas fa-share-alt"></i> Share Link</button>
          <button id="deletePdf"><i class="fas fa-trash"></i> Delete</button>
        </div>
      </div>
    </section>

    <!-- Footer -->
    <footer>
      <p>&copy; BestPDF 2025 â€“ Your PDF Editor</p>
    </footer>
  </div>

  <!-- External Libraries -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>

  <!-- Inline JavaScript -->
  <script>
    // DOM Elements
    const dropZone = document.getElementById('dropZone');
    const fileInput = document.getElementById('fileInput');
    const uploadBtn = document.getElementById('uploadBtn');
    const previewGrid = document.getElementById('previewGrid');
    const settingsSection = document.getElementById('settingsSection');
    const progressSection = document.getElementById('progressSection');
    const downloadBtn = document.getElementById('downloadPdf');
    const deletePdfBtn = document.getElementById('deletePdf');
    const convertBtn = document.getElementById('convertBtn');

    // Cloud integration (UI only)
    document.getElementById('googleDriveBtn').addEventListener('click', () => alert("Google Drive integration coming soon!"));
    document.getElementById('dropboxBtn').addEventListener('click', () => alert("Dropbox integration coming soon!"));

    // Files array
    let uploadedFiles = [];

    // Show file picker
    uploadBtn.addEventListener('click', () => fileInput.click());

    // Handle file input change
    fileInput.addEventListener('change', handleFiles);

    // Drag & Drop
    dropZone.addEventListener('dragover', (e) => {
      e.preventDefault();
      dropZone.classList.add('drag-over');
    });

    dropZone.addEventListener('dragleave', () => {
      dropZone.classList.remove('drag-over');
    });

    dropZone.addEventListener('drop', (e) => {
      e.preventDefault();
      dropZone.classList.remove('drag-over');
      const files = Array.from(e.dataTransfer.files).filter(f => f.type.startsWith('image/'));
      handleFileList(files);
    });

    // Handle file selection
    function handleFiles(e) {
      const files = Array.from(e.target.files).filter(f => f.type.startsWith('image/'));
      if (files.length === 0) return alert("Please select valid image files.");
      handleFileList(files);
    }

    function handleFileList(files) {
      uploadedFiles = [...uploadedFiles, ...files];
      updatePreview();
      settingsSection.classList.remove('hidden');
    }

    // Update preview grid
    function updatePreview() {
      previewGrid.innerHTML = '';
      uploadedFiles.forEach((file, index) => {
        const reader = new FileReader();
        reader.onload = (e) => {
          const card = document.createElement('div');
          card.className = 'image-card';
          card.innerHTML = `
            <img src="${e.target.result}" alt="Preview" />
            <button class="delete-btn" data-index="${index}">&times;</button>
          `;
          previewGrid.appendChild(card);
        };
        reader.readAsDataURL(file);
      });

      // Attach delete event listeners
      setTimeout(() => {
        document.querySelectorAll('.delete-btn').forEach(btn => {
          btn.addEventListener('click', (e) => {
            const index = parseInt(e.target.closest('.delete-btn').dataset.index);
            uploadedFiles.splice(index, 1);
            updatePreview();
            if (uploadedFiles.length === 0) {
              settingsSection.classList.add('hidden');
            }
          });
        });
      }, 100);
    }

    // Convert to PDF
    convertBtn.addEventListener('click', async () => {
      if (uploadedFiles.length === 0) return;

      progressSection.classList.remove('hidden');
      settingsSection.classList.add('hidden');

      const { jsPDF } = window.jspdf;
      const pdf = new jsPDF({
        orientation: document.querySelector('input[name="orientation"]:checked').value,
        unit: 'mm',
        format: document.getElementById('pageSize').value,
      });

      const margin = { none: 0, small: 10, big: 15 }[document.getElementById('margins').value];
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      const imgWidth = pageWidth - margin * 2;
      const imgHeight = pageHeight - margin * 2;

      for (let i = 0; i < uploadedFiles.length; i++) {
        const file = uploadedFiles[i];
        const img = new Image();
        const reader = new FileReader();

        await new Promise((resolve) => {
          reader.onload = (e) => {
            img.src = e.target.result;
            img.onload = () => {
              const ratio = Math.min(imgWidth / img.width, imgHeight / img.height);
              const w = img.width * ratio;
              const h = img.height * ratio;
              const x = (pageWidth - w) / 2;
              const y = margin + (imgHeight - h) / 2;

              pdf.addImage(img, 'JPEG', x, y, w, h); // Convert all to JPEG for compatibility
              if (i < uploadedFiles.length - 1) pdf.addPage();
              resolve();
            };
            img.onerror = () => {
              alert(`Failed to load image: ${file.name}`);
              resolve();
            };
          };
          reader.readAsDataURL(file);
        });

        // Update progress bar
        document.getElementById('progressFill').style.width = `${((i + 1) / uploadedFiles.length) * 100}%`;
      }

      // Finalize PDF
      const pdfBlob = pdf.output('blob');
      const pdfUrl = URL.createObjectURL(pdfBlob);

      // Download action
      downloadBtn.onclick = () => {
        const a = document.createElement('a');
        a.href = pdfUrl;
        a.download = 'converted_images.pdf';
        a.click();
      };

      // Hide progress, show download
      progressSection.classList.add('hidden');
      document.getElementById('downloadSection').classList.remove('hidden');
    });

    // Delete PDF and go back
    deletePdfBtn.addEventListener('click', () => {
      document.getElementById('downloadSection').classList.add('hidden');
      settingsSection.classList.remove('hidden');
    });
  </script>
</body>
</html>
